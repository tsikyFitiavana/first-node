{"ast":null,"code":"var util = require('util');\n\nvar _ = require('lodash');\n\nvar loggerInstance;\nvar defaultProvider = {\n  log: console.log,\n  debug: console.log,\n  // use .log(); since console does not have .debug()\n  info: console.info,\n  warn: console.warn,\n  error: console.error // log level 'weight'\n\n};\nvar LEVELS = {\n  debug: 10,\n  info: 20,\n  warn: 30,\n  error: 50,\n  silent: 80\n};\nmodule.exports = {\n  // singleton\n  getInstance: function getInstance() {\n    if (!loggerInstance) {\n      loggerInstance = new Logger();\n    }\n\n    return loggerInstance;\n  },\n  getArrow: getArrow\n};\n\nfunction Logger() {\n  var logLevel;\n  var provider;\n  var api = {\n    log: log,\n    debug: debug,\n    info: info,\n    warn: warn,\n    error: error,\n    setLevel: function setLevel(v) {\n      if (isValidLevel(v)) {\n        logLevel = v;\n      }\n    },\n    setProvider: function setProvider(fn) {\n      if (fn && isValidProvider(fn)) {\n        provider = fn(defaultProvider);\n      }\n    }\n  };\n  init();\n  return api;\n\n  function init() {\n    api.setLevel('info');\n    api.setProvider(function () {\n      return defaultProvider;\n    });\n  } // log will log messages, regardless of logLevels\n\n\n  function log() {\n    provider.log(_interpolate.apply(null, arguments));\n  }\n\n  function debug() {\n    if (_showLevel('debug')) {\n      provider.debug(_interpolate.apply(null, arguments));\n    }\n  }\n\n  function info() {\n    if (_showLevel('info')) {\n      provider.info(_interpolate.apply(null, arguments));\n    }\n  }\n\n  function warn() {\n    if (_showLevel('warn')) {\n      provider.warn(_interpolate.apply(null, arguments));\n    }\n  }\n\n  function error() {\n    if (_showLevel('error')) {\n      provider.error(_interpolate.apply(null, arguments));\n    }\n  }\n  /**\n   * Decide to log or not to log, based on the log levels 'weight'\n   * @param  {String}  showLevel [debug, info, warn, error, silent]\n   * @return {Boolean}\n   */\n\n\n  function _showLevel(showLevel) {\n    var result = false;\n    var currentLogLevel = LEVELS[logLevel];\n\n    if (currentLogLevel && currentLogLevel <= LEVELS[showLevel]) {\n      result = true;\n    }\n\n    return result;\n  } // make sure logged messages and its data are return interpolated\n  // make it possible for additional log data, such date/time or custom prefix.\n\n\n  function _interpolate() {\n    var fn = _.spread(util.format);\n\n    var result = fn(_.slice(arguments));\n    return result;\n  }\n\n  function isValidProvider(fnProvider) {\n    var result = true;\n\n    if (fnProvider && !_.isFunction(fnProvider)) {\n      throw new Error('[HPM] Log provider config error. Expecting a function.');\n    }\n\n    return result;\n  }\n\n  function isValidLevel(levelName) {\n    var validLevels = _.keys(LEVELS);\n\n    var isValid = _.includes(validLevels, levelName);\n\n    if (!isValid) {\n      throw new Error('[HPM] Log level error. Invalid logLevel.');\n    }\n\n    return isValid;\n  }\n}\n/**\n * -> normal proxy\n * => router\n * ~> pathRewrite\n * ≈> router + pathRewrite\n *\n * @param  {String} originalPath\n * @param  {String} newPath\n * @param  {String} originalTarget\n * @param  {String} newTarget\n * @return {String}\n */\n\n\nfunction getArrow(originalPath, newPath, originalTarget, newTarget) {\n  var arrow = ['>'];\n  var isNewTarget = originalTarget !== newTarget; // router\n\n  var isNewPath = originalPath !== newPath; // pathRewrite\n\n  if (isNewPath && !isNewTarget) {\n    arrow.unshift('~');\n  } else if (!isNewPath && isNewTarget) {\n    arrow.unshift('=');\n  } else if (isNewPath && isNewTarget) {\n    arrow.unshift('≈');\n  } else {\n    arrow.unshift('-');\n  }\n\n  return arrow.join('');\n}","map":null,"metadata":{},"sourceType":"script"}