{"ast":null,"code":"// when animating on canvas, it is best to use requestAnimationFrame instead of setTimeout or setInterval\n// not supported in all browsers though and sometimes needs a prefix, so we need a shim\nwindow.requestAnimFrame = function () {\n  return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function (callback) {\n    window.setTimeout(callback, 1000 / 60);\n  };\n}(); // now we will setup our basic variables for the demo\n\n\nvar canvas = document.getElementById('canvas'),\n    ctx = canvas.getContext('2d'),\n    // full screen dimensions\ncw = window.innerWidth,\n    ch = window.innerHeight,\n    // firework collection\nfireworks = [],\n    // particle collection\nparticles = [],\n    // starting hue\nhue = 120,\n    // when launching fireworks with a click, too many get launched at once without a limiter, one launch per 5 loop ticks\nlimiterTotal = 5,\n    limiterTick = 0,\n    // this will time the auto launches of fireworks, one launch per 80 loop ticks\ntimerTotal = 40,\n    timerTick = 0; // set canvas dimensions\n\ncanvas.width = cw;\ncanvas.height = ch; // now we are going to setup our function placeholders for the entire demo\n// get a random number within a range\n\nfunction random(min, max) {\n  return Math.random() * (max - min) + min;\n} // calculate the distance between two points\n\n\nfunction calculateDistance(p1x, p1y, p2x, p2y) {\n  var xDistance = p1x - p2x,\n      yDistance = p1y - p2y;\n  return Math.sqrt(Math.pow(xDistance, 2) + Math.pow(yDistance, 2));\n} // create firework\n\n\nfunction Firework(sx, sy, tx, ty) {\n  // actual coordinates\n  this.x = sx;\n  this.y = sy; // starting coordinates\n\n  this.sx = sx;\n  this.sy = sy; // target coordinates\n\n  this.tx = tx;\n  this.ty = ty; // distance from starting point to target\n\n  this.distanceToTarget = calculateDistance(sx, sy, tx, ty);\n  this.distanceTraveled = 0; // track the past coordinates of each firework to create a trail effect, increase the coordinate count to create more prominent trails\n\n  this.coordinates = [];\n  this.coordinateCount = 3; // populate initial coordinate collection with the current coordinates\n\n  while (this.coordinateCount--) {\n    this.coordinates.push([this.x, this.y]);\n  }\n\n  this.angle = Math.atan2(ty - sy, tx - sx);\n  this.speed = 2;\n  this.acceleration = 1.05;\n  this.brightness = random(50, 70); // circle target indicator radius\n\n  this.targetRadius = 1;\n} // update firework\n\n\nFirework.prototype.update = function (index) {\n  // remove last item in coordinates array\n  this.coordinates.pop(); // add current coordinates to the start of the array\n\n  this.coordinates.unshift([this.x, this.y]); // cycle the circle target indicator radius\n\n  if (this.targetRadius < 8) {\n    this.targetRadius += 0.3;\n  } else {\n    this.targetRadius = 1;\n  } // speed up the firework\n\n\n  this.speed *= this.acceleration; // get the current velocities based on angle and speed\n\n  var vx = Math.cos(this.angle) * this.speed,\n      vy = Math.sin(this.angle) * this.speed; // how far will the firework have traveled with velocities applied?\n\n  this.distanceTraveled = calculateDistance(this.sx, this.sy, this.x + vx, this.y + vy); // if the distance traveled, including velocities, is greater than the initial distance to the target, then the target has been reached\n\n  if (this.distanceTraveled >= this.distanceToTarget) {\n    createParticles(this.tx, this.ty); // remove the firework, use the index passed into the update function to determine which to remove\n\n    fireworks.splice(index, 1);\n  } else {\n    // target not reached, keep traveling\n    this.x += vx;\n    this.y += vy;\n  }\n}; // draw firework\n\n\nFirework.prototype.draw = function () {\n  ctx.beginPath(); // move to the last tracked coordinate in the set, then draw a line to the current x and y\n\n  ctx.moveTo(this.coordinates[this.coordinates.length - 1][0], this.coordinates[this.coordinates.length - 1][1]);\n  ctx.lineTo(this.x, this.y);\n  ctx.strokeStyle = 'hsl(' + hue + ', 100%, ' + this.brightness + '%)';\n  ctx.stroke();\n  ctx.beginPath(); // draw the target for this firework with a pulsing circle\n\n  ctx.arc(this.tx, this.ty, this.targetRadius, 0, Math.PI * 2);\n  ctx.stroke();\n}; // create particle\n\n\nfunction Particle(x, y) {\n  this.x = x;\n  this.y = y; // track the past coordinates of each particle to create a trail effect, increase the coordinate count to create more prominent trails\n\n  this.coordinates = [];\n  this.coordinateCount = 5;\n\n  while (this.coordinateCount--) {\n    this.coordinates.push([this.x, this.y]);\n  } // set a random angle in all possible directions, in radians\n\n\n  this.angle = random(0, Math.PI * 2);\n  this.speed = random(1, 10); // friction will slow the particle down\n\n  this.friction = 0.95; // gravity will be applied and pull the particle down\n\n  this.gravity = 1; // set the hue to a random number +-20 of the overall hue variable\n\n  this.hue = random(hue - 20, hue + 20);\n  this.brightness = random(50, 80);\n  this.alpha = 1; // set how fast the particle fades out\n\n  this.decay = random(0.015, 0.03);\n} // update particle\n\n\nParticle.prototype.update = function (index) {\n  // remove last item in coordinates array\n  this.coordinates.pop(); // add current coordinates to the start of the array\n\n  this.coordinates.unshift([this.x, this.y]); // slow down the particle\n\n  this.speed *= this.friction; // apply velocity\n\n  this.x += Math.cos(this.angle) * this.speed;\n  this.y += Math.sin(this.angle) * this.speed + this.gravity; // fade out the particle\n\n  this.alpha -= this.decay; // remove the particle once the alpha is low enough, based on the passed in index\n\n  if (this.alpha <= this.decay) {\n    particles.splice(index, 1);\n  }\n}; // draw particle\n\n\nParticle.prototype.draw = function () {\n  ctx.beginPath(); // move to the last tracked coordinates in the set, then draw a line to the current x and y\n\n  ctx.moveTo(this.coordinates[this.coordinates.length - 1][0], this.coordinates[this.coordinates.length - 1][1]);\n  ctx.lineTo(this.x, this.y);\n  ctx.strokeStyle = 'hsla(' + this.hue + ', 100%, ' + this.brightness + '%, ' + this.alpha + ')';\n  ctx.stroke();\n}; // create particle group/explosion\n\n\nfunction createParticles(x, y) {\n  // increase the particle count for a bigger explosion, beware of the canvas performance hit with the increased particles though\n  var particleCount = 30;\n\n  while (particleCount--) {\n    particles.push(new Particle(x, y));\n  }\n} // main demo loop\n\n\nfunction loop() {\n  // this function will run endlessly with requestAnimationFrame\n  requestAnimFrame(loop); // increase the hue to get different colored fireworks over time\n\n  hue += 0.5; // normally, clearRect() would be used to clear the canvas\n  // we want to create a trailing effect though\n  // setting the composite operation to destination-out will allow us to clear the canvas at a specific opacity, rather than wiping it entirely\n\n  ctx.globalCompositeOperation = 'destination-out'; // decrease the alpha property to create more prominent trails\n\n  ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';\n  ctx.fillRect(0, 0, cw, ch); // change the composite operation back to our main mode\n  // lighter creates bright highlight points as the fireworks and particles overlap each other\n\n  ctx.globalCompositeOperation = 'lighter'; // loop over each firework, draw it, update it\n\n  var i = fireworks.length;\n\n  while (i--) {\n    fireworks[i].draw();\n    fireworks[i].update(i);\n  } // loop over each particle, draw it, update it\n\n\n  var i = particles.length;\n\n  while (i--) {\n    particles[i].draw();\n    particles[i].update(i);\n  } // launch fireworks automatically to random coordinates\n\n\n  if (timerTick >= timerTotal) {\n    // start the firework at the bottom middle of the screen, then set the random target coordinates, the random y coordinates will be set within the range of the top half of the screen\n    fireworks.push(new Firework(cw / 2, ch, random(0, cw), random(0, ch / 2)));\n    timerTick = 0;\n  } else {\n    timerTick++;\n  }\n\n  if (limiterTick >= limiterTotal) {\n    fireworks.push(new Firework(cw / 2, ch));\n    limiterTick = 0;\n  } else {\n    limiterTick++;\n  }\n} // once the window loads, we are ready for some fireworks!\n\n\nwindow.onload = loop;","map":{"version":3,"sources":["/home/bruno/Bureau/first-node/front/src/ComponentsExplosion/FontExplosif.js"],"names":["window","requestAnimFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","callback","setTimeout","canvas","document","getElementById","ctx","getContext","cw","innerWidth","ch","innerHeight","fireworks","particles","hue","limiterTotal","limiterTick","timerTotal","timerTick","width","height","random","min","max","Math","calculateDistance","p1x","p1y","p2x","p2y","xDistance","yDistance","sqrt","pow","Firework","sx","sy","tx","ty","x","y","distanceToTarget","distanceTraveled","coordinates","coordinateCount","push","angle","atan2","speed","acceleration","brightness","targetRadius","prototype","update","index","pop","unshift","vx","cos","vy","sin","createParticles","splice","draw","beginPath","moveTo","length","lineTo","strokeStyle","stroke","arc","PI","Particle","friction","gravity","alpha","decay","particleCount","loop","globalCompositeOperation","fillStyle","fillRect","i","onload"],"mappings":"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","sourcesContent":["// when animating on canvas, it is best to use requestAnimationFrame instead of setTimeout or setInterval\n// not supported in all browsers though and sometimes needs a prefix, so we need a shim\nwindow.requestAnimFrame = ( function() {\n\treturn window.requestAnimationFrame ||\n\t\t\t\twindow.webkitRequestAnimationFrame ||\n\t\t\t\twindow.mozRequestAnimationFrame ||\n\t\t\t\tfunction( callback ) {\n\t\t\t\t\twindow.setTimeout( callback, 1000 / 60 );\n\t\t\t\t};\n})();\n\n// now we will setup our basic variables for the demo\nvar canvas = document.getElementById( 'canvas' ),\n\t\tctx = canvas.getContext( '2d' ),\n\t\t// full screen dimensions\n\t\tcw = window.innerWidth,\n\t\tch = window.innerHeight,\n\t\t// firework collection\n\t\tfireworks = [],\n\t\t// particle collection\n\t\tparticles = [],\n\t\t// starting hue\n\t\thue = 120,\n\t\t// when launching fireworks with a click, too many get launched at once without a limiter, one launch per 5 loop ticks\n\t\tlimiterTotal = 5,\n\t\tlimiterTick = 0,\n\t\t// this will time the auto launches of fireworks, one launch per 80 loop ticks\n\t\ttimerTotal = 40,\n\t\ttimerTick = 0;\n\t\t\n// set canvas dimensions\ncanvas.width = cw;\ncanvas.height = ch;\n\n// now we are going to setup our function placeholders for the entire demo\n\n// get a random number within a range\nfunction random( min, max ) {\n\treturn Math.random() * ( max - min ) + min;\n}\n\n// calculate the distance between two points\nfunction calculateDistance( p1x, p1y, p2x, p2y ) {\n\tvar xDistance = p1x - p2x,\n\t\t\tyDistance = p1y - p2y;\n\treturn Math.sqrt( Math.pow( xDistance, 2 ) + Math.pow( yDistance, 2 ) );\n}\n\n// create firework\nfunction Firework( sx, sy, tx, ty ) {\n\t// actual coordinates\n\tthis.x = sx;\n\tthis.y = sy;\n\t// starting coordinates\n\tthis.sx = sx;\n\tthis.sy = sy;\n\t// target coordinates\n\tthis.tx = tx;\n\tthis.ty = ty;\n\t// distance from starting point to target\n\tthis.distanceToTarget = calculateDistance( sx, sy, tx, ty );\n\tthis.distanceTraveled = 0;\n\t// track the past coordinates of each firework to create a trail effect, increase the coordinate count to create more prominent trails\n\tthis.coordinates = [];\n\tthis.coordinateCount = 3;\n\t// populate initial coordinate collection with the current coordinates\n\twhile( this.coordinateCount-- ) {\n\t\tthis.coordinates.push( [ this.x, this.y ] );\n\t}\n\tthis.angle = Math.atan2( ty - sy, tx - sx );\n\tthis.speed = 2;\n\tthis.acceleration = 1.05;\n\tthis.brightness = random( 50, 70 );\n\t// circle target indicator radius\n\tthis.targetRadius = 1;\n}\n\n// update firework\nFirework.prototype.update = function( index ) {\n\t// remove last item in coordinates array\n\tthis.coordinates.pop();\n\t// add current coordinates to the start of the array\n\tthis.coordinates.unshift( [ this.x, this.y ] );\n\t\n\t// cycle the circle target indicator radius\n\tif( this.targetRadius < 8 ) {\n\t\tthis.targetRadius += 0.3;\n\t} else {\n\t\tthis.targetRadius = 1;\n\t}\n\t\n\t// speed up the firework\n\tthis.speed *= this.acceleration;\n\t\n\t// get the current velocities based on angle and speed\n\tvar vx = Math.cos( this.angle ) * this.speed,\n\t\t\tvy = Math.sin( this.angle ) * this.speed;\n\t// how far will the firework have traveled with velocities applied?\n\tthis.distanceTraveled = calculateDistance( this.sx, this.sy, this.x + vx, this.y + vy );\n\t\n\t// if the distance traveled, including velocities, is greater than the initial distance to the target, then the target has been reached\n\tif( this.distanceTraveled >= this.distanceToTarget ) {\n\t\tcreateParticles( this.tx, this.ty );\n\t\t// remove the firework, use the index passed into the update function to determine which to remove\n\t\tfireworks.splice( index, 1 );\n\t} else {\n\t\t// target not reached, keep traveling\n\t\tthis.x += vx;\n\t\tthis.y += vy;\n\t}\n}\n\n// draw firework\nFirework.prototype.draw = function() {\n\tctx.beginPath();\n\t// move to the last tracked coordinate in the set, then draw a line to the current x and y\n\tctx.moveTo( this.coordinates[ this.coordinates.length - 1][ 0 ], this.coordinates[ this.coordinates.length - 1][ 1 ] );\n\tctx.lineTo( this.x, this.y );\n\tctx.strokeStyle = 'hsl(' + hue + ', 100%, ' + this.brightness + '%)';\n\tctx.stroke();\n\t\n\tctx.beginPath();\n\t// draw the target for this firework with a pulsing circle\n\tctx.arc( this.tx, this.ty, this.targetRadius, 0, Math.PI * 2 );\n\tctx.stroke();\n}\n\n// create particle\nfunction Particle( x, y ) {\n\tthis.x = x;\n\tthis.y = y;\n\t// track the past coordinates of each particle to create a trail effect, increase the coordinate count to create more prominent trails\n\tthis.coordinates = [];\n\tthis.coordinateCount = 5;\n\twhile( this.coordinateCount-- ) {\n\t\tthis.coordinates.push( [ this.x, this.y ] );\n\t}\n\t// set a random angle in all possible directions, in radians\n\tthis.angle = random( 0, Math.PI * 2 );\n\tthis.speed = random( 1, 10 );\n\t// friction will slow the particle down\n\tthis.friction = 0.95;\n\t// gravity will be applied and pull the particle down\n\tthis.gravity = 1;\n\t// set the hue to a random number +-20 of the overall hue variable\n\tthis.hue = random( hue - 20, hue + 20 );\n\tthis.brightness = random( 50, 80 );\n\tthis.alpha = 1;\n\t// set how fast the particle fades out\n\tthis.decay = random( 0.015, 0.03 );\n}\n\n// update particle\nParticle.prototype.update = function( index ) {\n\t// remove last item in coordinates array\n\tthis.coordinates.pop();\n\t// add current coordinates to the start of the array\n\tthis.coordinates.unshift( [ this.x, this.y ] );\n\t// slow down the particle\n\tthis.speed *= this.friction;\n\t// apply velocity\n\tthis.x += Math.cos( this.angle ) * this.speed;\n\tthis.y += Math.sin( this.angle ) * this.speed + this.gravity;\n\t// fade out the particle\n\tthis.alpha -= this.decay;\n\t\n\t// remove the particle once the alpha is low enough, based on the passed in index\n\tif( this.alpha <= this.decay ) {\n\t\tparticles.splice( index, 1 );\n\t}\n}\n\n// draw particle\nParticle.prototype.draw = function() {\n\tctx. beginPath();\n\t// move to the last tracked coordinates in the set, then draw a line to the current x and y\n\tctx.moveTo( this.coordinates[ this.coordinates.length - 1 ][ 0 ], this.coordinates[ this.coordinates.length - 1 ][ 1 ] );\n\tctx.lineTo( this.x, this.y );\n\tctx.strokeStyle = 'hsla(' + this.hue + ', 100%, ' + this.brightness + '%, ' + this.alpha + ')';\n\tctx.stroke();\n}\n\n// create particle group/explosion\nfunction createParticles( x, y ) {\n\t// increase the particle count for a bigger explosion, beware of the canvas performance hit with the increased particles though\n\tvar particleCount = 30;\n\twhile( particleCount-- ) {\n\t\tparticles.push( new Particle( x, y ) );\n\t}\n}\n\n// main demo loop\nfunction loop() {\n\t// this function will run endlessly with requestAnimationFrame\n\trequestAnimFrame( loop );\n\t\n\t// increase the hue to get different colored fireworks over time\n\thue += 0.5;\n\t\n\t// normally, clearRect() would be used to clear the canvas\n\t// we want to create a trailing effect though\n\t// setting the composite operation to destination-out will allow us to clear the canvas at a specific opacity, rather than wiping it entirely\n\tctx.globalCompositeOperation = 'destination-out';\n\t// decrease the alpha property to create more prominent trails\n\tctx.fillStyle = 'rgba(0, 0, 0, 0.5)';\n\tctx.fillRect( 0, 0, cw, ch );\n\t// change the composite operation back to our main mode\n\t// lighter creates bright highlight points as the fireworks and particles overlap each other\n\tctx.globalCompositeOperation = 'lighter';\n\t\n\t// loop over each firework, draw it, update it\n\tvar i = fireworks.length;\n\twhile( i-- ) {\n\t\tfireworks[ i ].draw();\n\t\tfireworks[ i ].update( i );\n\t}\n\t\n\t// loop over each particle, draw it, update it\n\tvar i = particles.length;\n\twhile( i-- ) {\n\t\tparticles[ i ].draw();\n\t\tparticles[ i ].update( i );\n\t}\n\t\n\t// launch fireworks automatically to random coordinates\n\tif( timerTick >= timerTotal ) {\n\t\t\t// start the firework at the bottom middle of the screen, then set the random target coordinates, the random y coordinates will be set within the range of the top half of the screen\n\t\t\tfireworks.push( new Firework( cw / 2, ch, random( 0, cw ), random( 0, ch / 2 ) ) );\n\t\t\ttimerTick = 0;\n\t} else {\n\t\ttimerTick++;\n\t}\n\t\n\tif( limiterTick >= limiterTotal ) {\n\t\t\tfireworks.push( new Firework( cw / 2, ch) );\n\t\t\tlimiterTick = 0;\n\t} else {\n\t\tlimiterTick++;\n\t}\n}\n// once the window loads, we are ready for some fireworks!\nwindow.onload = loop;"]},"metadata":{},"sourceType":"module"}